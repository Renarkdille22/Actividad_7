Actividad 7: Sistemas de control de versiones
Control de versiones en Ingeniería de Software:
Los Sistemas de Control de Versiones (VCS) son herramientas fundamentales para rastrear y gestionar los cambios en el código y otros archivos de un proyecto. Permiten que múltiples desarrolladores trabajen simultáneamente sin conflictos, manteniendo un historial completo de todas las modificaciones y facilitando la recuperación de versiones anteriores.
Historia de los Sistemas de Control de Versiones (VCS):
En los años 60, surgieron los primeros precursores como IEBUPDTE de IBM, que utilizaba tarjetas perforadas para gestionar versiones básicas de código. En los 70, SCCS (Source Code Control System) de Bell Labs (1972) marcó un avance significativo al permitir crear, editar y rastrear cambios en archivos, aunque limitado a un solo usuario por archivo.
Los 80 vieron el desarrollo de RCS (Revision Control System) por Walter Tichy (1982), que innovó con el concepto de "deltas inversos" para un almacenamiento más eficiente de los cambios. Más tarde, CVS (Concurrent Versions Systems) de Dick Grune (1986) permitió a múltiples desarrolladores trabajar en el mismo proyecto de forma concurrente, utilizando un modelo cliente-servidor y la compresión de diferencias (delta encoding).
La era de los 90 y el nuevo milenio trajo a Subversion (SVN) en el año 2000, una mejora de CVS que se convirtió en un Sistema de Control de Versiones Centralizado (CVCS) dominante, donde todos los cambios se almacenaban en un único servidor.
Finalmente, en el 2005, Linus Torvalds creó Git, el Distributed Version Control System (DVCS) más conocido y utilizado en la actualidad.
Tipos de Sistemas de Control de Versiones
Existen diferentes tipos de VCS, cada uno con sus propias características y casos de uso:
•	Sistemas de Control de Versiones Locales: Estos sistemas almacenan los cambios del código directamente en la computadora del usuario. Los cambios se guardan como parches, que se aplican a una única versión de la base de código. Son adecuados para proyectos pequeños y no están diseñados para la colaboración.
•	Sistemas de Control de Versiones Centralizados (CVCS): Cuentan con un único repositorio central alojado en un servidor. Todos los usuarios trabajan con este repositorio y suben sus cambios a él. Para que los cambios de un desarrollador sean visibles para otros, deben hacer commit al servidor, y los demás usuarios deben actualizar sus copias. Algunos CVCS implementan mecanismos de bloqueo de archivos para evitar que dos usuarios modifiquen el mismo archivo simultáneamente. Subversion (SVN) es un ejemplo popular de este tipo de sistema.
•	Sistemas de Control de Versiones Distribuidos (DVCS): En este modelo, cada desarrollador tiene una copia completa del repositorio y de todo su historial en su máquina local. Esto permite a los colaboradores trabajar en la misma base de código desde cualquier ubicación, incluso sin conexión constante a una red. Los cambios se hacen commit localmente y luego se hace push a un repositorio central, para que otros puedan hacer pull y actualizar sus propias copias. Git y Mercurial son ejemplos destacados de sistemas DVCS.
•	Sistemas Basados en Bloqueo (Lock-based): Estos sistemas bloquean archivos individuales cuando un usuario comienza a trabajar en ellos, impidiendo que otros hagan cambios conflictivos al mismo tiempo.
•	Sistemas Optimistas: En contraste con los sistemas basados en bloqueo, los sistemas optimistas permiten que cada usuario tenga su propio espacio de trabajo privado. Los usuarios envían solicitudes al servidor para compartir sus cambios con el equipo, y el servidor determina qué modificaciones pueden fusionarse de forma segura, ayudando a resolver conflictos.
Los sistemas centralizados y distribuidos son los tipos más ampliamente utilizados debido a su escalabilidad y flexibilidad, lo que facilita la colaboración de desarrolladores en cualquier parte del mundo.
Herramientas existentes para el control de versiones:
•	Git: El DVCS más utilizado, conocido por su velocidad, eficiencia, y potentes capacidades de ramificación y fusión.
•	Subversion (SVN): Un CVCS popular por su simplicidad y naturaleza centralizada, todavía usado en muchas organizaciones.
•	Mercurial: Otro DVCS similar a Git, con una interfaz más sencilla, utilizado en proyectos grandes.
•	Azure DevOps Server: Un sistema de control de versiones centralizado con servicios de desarrollo.
•	Perforce (Helix Core): Un CVCS valorado por su simplicidad en proyectos a gran escala.
Conclusión:
Realizar esta actividad fue interesante porque, no solo creé mi cuenta y espacio en Git, sino que también aprendí sobre los sistemas de control de versiones. Realmente no había escuchado de ellos antes y ahora entiendo su importancia para rastrear y gestionar cambios en el código y otros archivos de un proyecto, así como las herramientas existentes y cómo utilizar Git específicamente. Espero poder profundizar más en este tema y aplicarlo de manera práctica en el futuro.
Referencias:
Club, C. (2025, 27 marzo). 20 Best Version Control Tools Reviewed for 2025 - The CTO Club. The CTO Club. https://thectoclub.com/tools/best-version-control-tools/
GeeksforGeeks. (2025, marzo 6). Version Control systems. GeeksforGeeks. https://www.geeksforgeeks.org/version-control-systems/
GitHub. (2024, 29 julio). What is Version Control? GitHub. https://github.com/resources/articles/software-development/what-is-version-control
Hajirajabi, M. (2022, 7 enero). A brief history of Version Control Systems - Mehran Hajirajabi - Medium. Medium. https://medium.com/@mehran.hrajabi98/a-brief-history-of-version-control-systems-vcss-5881f07ba0e1
McMillan T. (2021, 24 septiembre). A History of Version Control. Taryn Writes Code. https://tarynwritescode.hashnode.dev/a-history-of-version-control
Mijacobs. (s. f.). ¿Qué es el control de versiones? - Azure DevOps. Microsoft Learn. https://learn.microsoft.com/es-es/devops/develop/git/what-is-version-control
Katipoğlu, M. (2023, 16 abril). The Evolution of Version Control Systems: A Brief history of the last 6 decades! - KTPQL. Ktpql. https://www.ktpql.com/evolution-of-version-control-systems/
